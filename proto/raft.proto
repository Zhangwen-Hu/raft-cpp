syntax = "proto3";

package raft;

// Log entry containing command and metadata
message LogEntry {
    int64 term = 1;
    int64 index = 2;
    bytes command = 3;
}

// Request vote RPC arguments
message RequestVoteRequest {
    int64 term = 1;           // candidate's term
    string candidate_id = 2;  // candidate requesting vote
    int64 last_log_index = 3; // index of candidate's last log entry
    int64 last_log_term = 4;  // term of candidate's last log entry
}

// Request vote RPC results
message RequestVoteResponse {
    int64 term = 1;         // current term, for candidate to update itself
    bool vote_granted = 2;  // true means candidate received vote
}

// Append entries RPC arguments
message AppendEntriesRequest {
    int64 term = 1;              // leader's term
    string leader_id = 2;        // so follower can redirect clients
    int64 prev_log_index = 3;    // index of log entry immediately preceding new ones
    int64 prev_log_term = 4;     // term of prev_log_index entry
    repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
    int64 leader_commit = 6;     // leader's commit_index
}

// Append entries RPC results
message AppendEntriesResponse {
    int64 term = 1;    // current term, for leader to update itself
    bool success = 2;  // true if follower contained entry matching prev_log_index and prev_log_term
    int64 next_index = 3; // hint for next index to try (for optimization)
}

// Install snapshot RPC arguments
message InstallSnapshotRequest {
    int64 term = 1;              // leader's term
    string leader_id = 2;        // so follower can redirect clients
    int64 last_included_index = 3; // the snapshot replaces all entries up through and including this index
    int64 last_included_term = 4;  // term of last_included_index
    int64 offset = 5;            // byte offset where chunk is positioned in the snapshot file
    bytes data = 6;              // raw bytes of the snapshot chunk, starting at offset
    bool done = 7;               // true if this is the last chunk
}

// Install snapshot RPC results
message InstallSnapshotResponse {
    int64 term = 1; // current term, for leader to update itself
}

// Client request to add command to log
message ClientRequest {
    bytes command = 1; // command to be executed by state machine
}

// Client response
message ClientResponse {
    bool success = 1;      // true if command was successfully added to log
    string leader_hint = 2; // hint about current leader
    bytes result = 3;      // result of command execution (if successful)
}

// Raft service definition
service RaftService {
    // Request vote RPC
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    
    // Append entries RPC (also used for heartbeats)
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    
    // Install snapshot RPC
    rpc InstallSnapshot(InstallSnapshotRequest) returns (InstallSnapshotResponse);
    
    // Client command submission
    rpc SubmitCommand(ClientRequest) returns (ClientResponse);
} 